# class name for objects of mock ec2 instances to be in running aws-mock, should be a sub-class that extends com.tlswe.awsmock.ec2.model.MockEc2Instance
ec2.instance.class=com.tlswe.awsmock.ec2.model.DefaultMockEc2Instance

ec2.placement=us-east-1

# the xml namespace that matches the original wsdl from which we generate the web service stubs
xmlns.current=http://ec2.amazonaws.com/doc/2013-02-01/

# the api version that matches the original wsdl from which we generate the web service stubs
ec2.api.version.current.impl=2013-02-01

# switch that enables compatibility for working with specified api version for elasticfox
elasticfox.compatible=true
ec2.api.version.elasticfox=2010-11-15

# period of cleaning up terminated mock ec2 instances
ec2.cleanupTerminatedInstances.time.seconds=1800

# predefined AMIs
predefined.mock.ami.1=ami-12345678
predefined.mock.ami.2=ami-00abcdef
predefined.mock.ami.3=ami-88888888

# min/max boot/shutdown time (in seconds) for a mock ec2 instance
instance.min.boot.time.seconds=6
instance.max.boot.time.seconds=10
instance.min.shutdown.time.seconds=6
instance.max.shutdown.time.seconds=12

# min/max boot/shutdown time (in milliseconds) for a mock ec2 instance
# Setting time in ms has precedence to seconds
# instance.min.boot.time=15000
# instance.max.boot.time=30000
# instance.min.shutdown.time=6000
# instance.max.shutdown.time=20000

# simple file based persistence (only save on context stopping and load on context starting)
persistence.enabled=false
# point to the target file to which you would like to make runtime objects persistent
# Point to the target folder location for all data susch as instances, vpcs etc.
persistence.store.path=/var/log/aws-mock

# network related information
network.vpcId=vpc-6e6eb509
network.subnetId=subnet-0b763521
network.privateIpAddress=172.31.55.149
network.sourcePort=80
network.destPort=80
network.routeTableId=rtb-45c3e522
network.internetGatewayId=igw-6bbde20f
network.securityGroupId=sg-96e961ed
network.securityOwnerId=391387808006
network.securityGroupName=cell-manager-security-group
network.ipProtocol=tcp
network.vpcState=available
network.cidrBlock=172.31.0.0/16

# Storage Related Information
storage.volumeId=vol-1234567890abcdef0
storage.volumeType=standard
storage.volumeStatus=in-use
storage.instanceId=i-1234567890abcdef0


# CloudWatch related information

# the xml namespace that matches the original wsdl from which we generate the web service stubs
cloudwatch.xmlns.current=http://monitoring.amazonaws.com/doc/2010-08-01/

# the api version that matches the original wsdl from which we generate the web service stubs
cloudwatch.api.version.current.impl=2010-08-01

CPUUtilization.range.average=10,30
CPUUtilization.range.samplecount=10,30

DiskReadBytes.range.average=2,10
DiskReadBytes.range.samplecount=10,30

DiskWriteBytes.range.average=2,10
DiskWriteBytes.range.samplecount=10,30

NetworkIn.range.average=500,1000
NetworkIn.range.samplecount=500,1000

NetworkOut.range.average=1000,1500
NetworkOut.range.samplecount=10,30

CPUCreditUsage.range.average=0,1
CPUCreditUsage.range.samplecount=0,1

EstimatedCharges.range.average=2,4
EstimatedCharges.range.samplecount=2,5

CPUCreditBalance.range.average=0,1
CPUCreditBalance.range.samplecount=0,1

DiskReadOps.range.average=2,10
DiskReadOps.range.samplecount=2,10

DiskWriteOps.range.average=2,10
DiskWriteOps.range.samplecount=2,10

NetworkPacketsIn.range.average=5,10
NetworkPacketsIn.range.samplecount=5,10

NetworkPacketsOut.range.average=5,10
NetworkPacketsOut.range.samplecount=5,10

StatusCheckFailed.range.average=1,2
StatusCheckFailed.range.samplecount=1,2

StatusCheckFailed_Instance.range.average=1,2
StatusCheckFailed_Instance.range.samplecount=1,2

StatusCheckFailed_System.range.average=1,2
StatusCheckFailed_System.range.samplecount=1,2
